/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package omfbreports;

import java.awt.Cursor;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.InetAddress;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import net.sf.image4j.codec.bmp.BMPDecoder;

/**
 *
 * @author Emmanuel Ikpe
 */
public class Clients extends javax.swing.JFrame {

    /**
     * Creates new form Clients
     */
    public Clients() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextFieldname = new javax.swing.JTextField();
        jTextFieldacc = new javax.swing.JTextField();
        jTextFieldnuban = new javax.swing.JTextField();
        jTextFieldIDcard = new javax.swing.JTextField();
        jTextFieldbvn = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldregdate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldaddress = new javax.swing.JTextField();
        jTextFieldRefno = new javax.swing.JTextField();
        jTextFieldphone = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableacc = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablehist = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldBalCU = new javax.swing.JTextField();
        jTextFieldBalU = new javax.swing.JTextField();
        jTextFieldBalC = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextFieldgroup = new javax.swing.JTextField();
        jButtonO = new javax.swing.JButton();
        jChAllhist = new javax.swing.JCheckBox();
        jLabel18 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jComboBox1000 = new javax.swing.JComboBox<>();
        jComboBox500 = new javax.swing.JComboBox<>();
        jComboBox10 = new javax.swing.JComboBox<>();
        jComboBox200 = new javax.swing.JComboBox<>();
        jComboBox100 = new javax.swing.JComboBox<>();
        jComboBox20 = new javax.swing.JComboBox<>();
        jComboBox5 = new javax.swing.JComboBox<>();
        jComboBox50 = new javax.swing.JComboBox<>();
        jTextFieldsum = new javax.swing.JTextField();
        jButtonok = new javax.swing.JButton();
        jButtonok1 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jComboBoxmultiple = new javax.swing.JComboBox<>();
        jLabelpercent = new javax.swing.JLabel();
        jButtonchrg = new javax.swing.JButton();
        jButtoncert = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabelpix = new javax.swing.JLabel();
        jLabelsign = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTablesign = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableDoc = new javax.swing.JTable();
        jLabelpreview = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Browse Clients");
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTabbedPane4.setBackground(new java.awt.Color(0, 0, 0));
        jTabbedPane4.setForeground(new java.awt.Color(0, 0, 255));
        jTabbedPane4.setAutoscrolls(true);
        jTabbedPane4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTabbedPane4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane4MouseClicked(evt);
            }
        });
        jTabbedPane4.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTabbedPane4ComponentShown(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(0, 0, 255));
        jPanel2.setAutoscrolls(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Branch");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("A/C NO");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Bank Verification No");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("NUBAN CODE");

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ohafia" }));
        jComboBox1.setToolTipText("");
        jComboBox1.setEnabled(false);

        jTextFieldname.setEditable(false);
        jTextFieldname.setBackground(new java.awt.Color(204, 204, 190));
        jTextFieldname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextFieldname.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jTextFieldacc.setEditable(false);
        jTextFieldacc.setBackground(new java.awt.Color(204, 204, 190));
        jTextFieldacc.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jTextFieldnuban.setEditable(false);
        jTextFieldnuban.setBackground(new java.awt.Color(204, 204, 190));
        jTextFieldnuban.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jTextFieldIDcard.setEditable(false);
        jTextFieldIDcard.setBackground(new java.awt.Color(204, 204, 190));

        jTextFieldbvn.setEditable(false);
        jTextFieldbvn.setBackground(new java.awt.Color(204, 204, 190));
        jTextFieldbvn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jPanel1.setForeground(new java.awt.Color(0, 0, 255));
        jPanel1.setToolTipText("");

        jRadioButton1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jRadioButton1.setText("Name");
        jRadioButton1.setOpaque(false);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jRadioButton2.setText("A/C NO");
        jRadioButton2.setOpaque(false);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jRadioButton5.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jRadioButton5.setText("Ref No");
        jRadioButton5.setOpaque(false);
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        jRadioButton6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jRadioButton6.setText("ID Card");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        jRadioButton3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jRadioButton3.setText("NUBAN Code");
        jRadioButton3.setOpaque(false);
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jRadioButton4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jRadioButton4.setText("Bank Verification Number");
        jRadioButton4.setOpaque(false);
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton6)
                            .addComponent(jRadioButton3)
                            .addComponent(jRadioButton2)
                            .addComponent(jRadioButton5))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton4)
                            .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jRadioButton1)
                .addGap(0, 0, 0)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton6)
                .addGap(0, 0, 0)
                .addComponent(jRadioButton3)
                .addGap(0, 0, 0)
                .addComponent(jRadioButton4))
        );

        jSeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jSeparator1.setOpaque(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/omfbreports/Resource/searchicon.PNG"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 187, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 173, Short.MAX_VALUE)
        );

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel6.setText("Capture And Verify FingerPrint");
        jLabel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel6.setOpaque(true);

        jLabel7.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel7.setOpaque(true);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Address");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Registration Date");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Group Code/No");

        jTextFieldregdate.setEditable(false);
        jTextFieldregdate.setBackground(new java.awt.Color(204, 204, 190));
        jTextFieldregdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel11.setText("Ref No:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel12.setText("Phone No:");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel13.setText("ID Card:");

        jTextFieldaddress.setEditable(false);
        jTextFieldaddress.setBackground(new java.awt.Color(204, 204, 190));
        jTextFieldaddress.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jTextFieldRefno.setEditable(false);
        jTextFieldRefno.setBackground(new java.awt.Color(204, 204, 190));

        jTextFieldphone.setEditable(false);
        jTextFieldphone.setBackground(new java.awt.Color(204, 204, 190));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setToolTipText("");
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);

        jTableacc.setBackground(new java.awt.Color(255, 153, 51));
        jTableacc.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jTableacc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title", "GL A/C NO", "A/C NO", "Loan Cycle", "A/C Balance", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableacc.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableacc.setColumnSelectionAllowed(true);
        jTableacc.setSelectionBackground(new java.awt.Color(0, 51, 255));
        jTableacc.setShowHorizontalLines(isEnabled());
        jTableacc.setShowVerticalLines(isEnabled());
        jTableacc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableaccMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableacc);
        jTableacc.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (jTableacc.getColumnModel().getColumnCount() > 0) {
            jTableacc.getColumnModel().getColumn(0).setPreferredWidth(150);
            jTableacc.getColumnModel().getColumn(1).setPreferredWidth(60);
            jTableacc.getColumnModel().getColumn(2).setPreferredWidth(60);
            jTableacc.getColumnModel().getColumn(3).setPreferredWidth(30);
            jTableacc.getColumnModel().getColumn(4).setPreferredWidth(110);
            jTableacc.getColumnModel().getColumn(5).setResizable(false);
        }

        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jScrollPane2KeyPressed(evt);
            }
        });

        jTablehist.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jTablehist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Trx Date", "Session Date", "Trx NO", "Text", "Amount", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablehist.setToolTipText("");
        jTablehist.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTablehist.setFillsViewportHeight(true);
        jTablehist.setSelectionBackground(new java.awt.Color(0, 51, 255));
        jTablehist.setShowHorizontalLines(isEnabled());
        jTablehist.setShowVerticalLines(isEnabled());
        jTablehist.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTablehistMouseMoved(evt);
            }
        });
        jTablehist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablehistMouseClicked(evt);
            }
        });
        jTablehist.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTablehistKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTablehist);
        jTablehist.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (jTablehist.getColumnModel().getColumnCount() > 0) {
            jTablehist.getColumnModel().getColumn(0).setPreferredWidth(80);
            jTablehist.getColumnModel().getColumn(1).setPreferredWidth(80);
            jTablehist.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTablehist.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTablehist.getColumnModel().getColumn(4).setPreferredWidth(80);
            jTablehist.getColumnModel().getColumn(5).setPreferredWidth(150);
        }

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel14.setText("Total (Cleared + Uncleared)");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel15.setText("Cleared Balance");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel16.setText("UnCleared Balance");

        jTextFieldBalCU.setBackground(new java.awt.Color(204, 204, 190));
        jTextFieldBalCU.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jTextFieldBalU.setBackground(new java.awt.Color(204, 204, 190));
        jTextFieldBalU.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextFieldBalU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBalUActionPerformed(evt);
            }
        });

        jTextFieldBalC.setBackground(new java.awt.Color(204, 204, 190));
        jTextFieldBalC.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setText("Account Status");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(51, 51, 255));
        jLabel19.setText("<html><u>Account Details</u></html>");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(51, 51, 255));
        jLabel20.setText("<html><u>Transaction History</u></html>");

        jTextFieldgroup.setEditable(false);
        jTextFieldgroup.setBackground(new java.awt.Color(204, 204, 190));
        jTextFieldgroup.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jButtonO.setText("Ok");
        jButtonO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOActionPerformed(evt);
            }
        });

        jChAllhist.setText("All Account Details");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setText("1000");
        jLabel18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel18MouseClicked(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel21.setText("500");
        jLabel21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel21MouseClicked(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel22.setText("200");
        jLabel22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel22MouseClicked(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel23.setText("100");
        jLabel23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel23MouseClicked(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel24.setText("50");
        jLabel24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel24MouseClicked(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel26.setText("20");
        jLabel26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel26MouseClicked(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel27.setText("10");
        jLabel27.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel27MouseClicked(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel28.setText("5");
        jLabel28.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel28MouseClicked(evt);
            }
        });

        jComboBox1000.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox1000.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        jComboBox1000.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1000ActionPerformed(evt);
            }
        });

        jComboBox500.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox500.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        jComboBox500.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox500ActionPerformed(evt);
            }
        });

        jComboBox10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox10.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", " " }));
        jComboBox10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox10ActionPerformed(evt);
            }
        });

        jComboBox200.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox200.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", " " }));
        jComboBox200.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox200ActionPerformed(evt);
            }
        });

        jComboBox100.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox100.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", " " }));
        jComboBox100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox100ActionPerformed(evt);
            }
        });

        jComboBox20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox20.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", " " }));
        jComboBox20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox20ActionPerformed(evt);
            }
        });

        jComboBox5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", " ", " " }));
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });

        jComboBox50.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox50.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", " " }));
        jComboBox50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox50ActionPerformed(evt);
            }
        });

        jTextFieldsum.setEditable(false);
        jTextFieldsum.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jTextFieldsum.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 153, 102)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        jTextFieldsum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldsumMouseClicked(evt);
            }
        });

        jButtonok.setText("OK");
        jButtonok.setBorder(null);
        jButtonok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonokActionPerformed(evt);
            }
        });

        jButtonok1.setText("CLS");
        jButtonok1.setBorder(null);
        jButtonok1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonok1ActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel25.setText("X");

        jComboBoxmultiple.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jComboBoxmultiple.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        jComboBoxmultiple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxmultipleActionPerformed(evt);
            }
        });

        jLabelpercent.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelpercent.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jButtonchrg.setText("Charge");
        jButtonchrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonchrgActionPerformed(evt);
            }
        });

        jButtoncert.setText("Cert");
        jButtoncert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtoncertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButtonO, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(117, 117, 117)
                                .addComponent(jButtonchrg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtoncert)
                                .addGap(49, 49, 49)
                                .addComponent(jChAllhist, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel14)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(175, 175, 175)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jTextFieldBalCU, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldBalU, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldBalC, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(31, 31, 31)
                                        .addComponent(jButton2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelpercent, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jTextFieldacc, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(98, 98, 98)
                                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jTextFieldname, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                            .addGap(17, 17, 17)
                                                            .addComponent(jTextFieldnuban, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                            .addGap(18, 18, 18)
                                                            .addComponent(jTextFieldbvn, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(52, 52, 52)
                                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel10)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel9))
                                            .addGap(47, 47, 47)
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addComponent(jTextFieldregdate, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jLabel12)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jTextFieldphone, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                            .addComponent(jTextFieldgroup, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                            .addComponent(jLabel13))
                                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                            .addComponent(jTextFieldaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                            .addComponent(jLabel11)))
                                                    .addGap(18, 18, 18)
                                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jTextFieldRefno, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jTextFieldIDcard, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(413, 413, 413)
                                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonok1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonok, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox1000, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox200, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox100, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel24)
                                        .addGap(18, 18, 18)
                                        .addComponent(jComboBox50, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addComponent(jLabel26)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jComboBox20, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(jLabel27))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel28)
                                                .addGap(18, 18, 18)
                                                .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(jTextFieldsum, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox500, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxmultiple, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 14, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel1)
                                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, 0)
                                        .addComponent(jTextFieldname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(0, 0, 0)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jTextFieldacc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, 0)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(jTextFieldnuban, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, 0)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jTextFieldbvn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jButton1))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, 0)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel11)
                            .addComponent(jTextFieldaddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldRefno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jTextFieldregdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jTextFieldphone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel13)
                            .addComponent(jTextFieldIDcard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldgroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(jComboBox1000, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel21)
                                    .addComponent(jComboBox500, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel22)
                                    .addComponent(jComboBox200, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel23)
                                    .addComponent(jComboBox100, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel24)
                                    .addComponent(jComboBox50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(4, 4, 4)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel26))
                                .addGap(1, 1, 1)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel27))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel28))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldsum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonok)
                                    .addComponent(jButtonok1)
                                    .addComponent(jLabel25)
                                    .addComponent(jComboBoxmultiple, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelpercent, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldBalCU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14))
                                .addGap(0, 0, 0)
                                .addComponent(jTextFieldBalU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jTextFieldBalC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jChAllhist)
                    .addComponent(jButtonchrg)
                    .addComponent(jButtoncert))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonO, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane4.addTab("                                             1. General                                     ", jPanel2);

        jLabelpix.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabelpix.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelpixMouseClicked(evt);
            }
        });

        jLabelsign.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabelsign.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelsignMouseClicked(evt);
            }
        });

        jTablesign.setBackground(new java.awt.Color(255, 153, 51));
        jTablesign.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Address", "Designation"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablesign.setShowHorizontalLines(isEnabled());
        jTablesign.setShowVerticalLines(isEnabled());
        jTablesign.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablesignMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTablesign);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/omfbreports/Resource/pixsignbutton.PNG"))); // NOI18N
        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabelpix, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelsign, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(447, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelsign, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addComponent(jLabelpix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("                              2. Photo and Signature                 ", jPanel4);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel17.setBackground(new java.awt.Color(204, 204, 255));
        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 102, 0));
        jLabel17.setText("Click to View Forms");
        jLabel17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 0, 204), 10, true));
        jLabel17.setOpaque(true);
        jLabel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel17MouseClicked(evt);
            }
        });

        jTableDoc.setBackground(new java.awt.Color(255, 153, 51));
        jTableDoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Document Type     [Click to view]", "Filename"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableDoc.setShowHorizontalLines(isEnabled());
        jTableDoc.setShowVerticalLines(isEnabled());
        jTableDoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDocMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTableDoc);
        if (jTableDoc.getColumnModel().getColumnCount() > 0) {
            jTableDoc.getColumnModel().getColumn(0).setPreferredWidth(400);
            jTableDoc.getColumnModel().getColumn(1).setPreferredWidth(150);
        }

        jLabelpreview.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)))
                .addComponent(jLabelpreview, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(299, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelpreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane4.addTab("Opening Forms", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
jRadioButton1.setSelected(true);  
conn= glob.getConnect();
// hides the charge button
jButtonchrg.setVisible(false);// hides the charge button
jButtoncert.setVisible(false);// hides the cert button
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            conn.close();        // TODO add your handling code here:
        } catch (SQLException ex) {
         //error was suppressed
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
jButtonchrg.setVisible(false);// hides the charge button
jButtoncert.setVisible(false);// hides the cert button
        if(!search.accno.equalsIgnoreCase("n") && activate==true){
    //JOptionPane.showMessageDialog(rootPane, search.accno);

jTextFieldname.setText(search.acctitle.trim());  
jTextFieldacc.setText(search.accno.trim()); 
//jTextFieldnuban.setText(search.nuban); 
jTextFieldbvn.setText(search.BVN); 
jTextFieldaddress.setText(search.addr.trim()); 
jTextFieldregdate.setText(search.regdate.substring(8,10)+"/"+search.regdate.substring(5,7)+"/"+search.regdate.substring(0,4)); 
jTextFieldgroup.setText(search.groupname.trim()); 
jTextFieldRefno.setText(search.ref);  
jTextFieldphone.setText(search.phone); 
jTextFieldIDcard.setText(search.idcard); 
conn=glob.getConnect();
//JOptionPane.showMessageDialog(rootPane, "ok");
String q="select m.gl_no, ac_no,ac_name,ac_status,'0' cycle from member m  inner join coa c on m.gl_no=c.gl_no " +
" where m.cust_no='"+search.accnoonly+"' and m.gl_no not like'104%'  order by ac_name";
 //this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
String q2="select distinct l.gl_no, l.ac_no,ac_name,ac_status,l.cycle from loans l  inner join member m on l.ac_no=m.ac_no  inner join coa c"+
" on l.gl_no=c.gl_no where m.cust_no='"+search.accnoonly+"'  order by l.cycle desc";

 if(searchtrue){
     if(accCount>22){accCount=22;}
 for(int k=0; k<accCount;k++){
     jTableacc.getModel().setValueAt(  "", k, 0);
                    jTableacc.getModel().setValueAt(  "", k, 1);
                   jTableacc.getModel().setValueAt(  "", k, 2);
                    jTableacc.getModel().setValueAt(  "", k, 3);
                   
                     jTableacc.getModel().setValueAt(  "", k, 4);
                 jTableacc.getModel().setValueAt( "", k, 5);
            
    }
 }
String status;
     
            
try{
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
                //Retrieving all the saving product
                ResultSet current = stmt.executeQuery(q);
           
           
                int j=0;
                 while(current.next()){
                     jTableacc.getModel().setValueAt(current.getString("ac_name"), j, 0);
                    jTableacc.getModel().setValueAt(current.getString("gl_no"), j, 1);
                    jTableacc.getModel().setValueAt(current.getString("ac_no"), j, 2);
                    jTableacc.getModel().setValueAt("0", j, 3);
                   status=current.getString("ac_status");
                if(status.equalsIgnoreCase("A")){status="Active";}
                else if(status.equalsIgnoreCase("C")){status="Closed";}
                else if(status.equalsIgnoreCase("D")){status="Dormant";}
                else if(status.equalsIgnoreCase("H")){status="On Hold";}
               
                    jTableacc.getModel().setValueAt(status, j, 5);

                     j=j+1;
                 }
              
                 //retrieving all the Loan Product
               current = stmt.executeQuery(q2); 
                
                 while(current.next()){
                    jTableacc.getModel().setValueAt(current.getString("ac_name"), j, 0);
                    jTableacc.getModel().setValueAt(current.getString("gl_no"), j, 1);
                    jTableacc.getModel().setValueAt(current.getString("ac_no"), j, 2);
                    jTableacc.getModel().setValueAt(current.getString("cycle"), j, 3);
                   status=current.getString("ac_status");
                if(status.equalsIgnoreCase("A")){status="Active";}
                else if(status.equalsIgnoreCase("C")){status="Closed";}
                else if(status.equalsIgnoreCase("D")){status="Dormant";}
                else if(status.equalsIgnoreCase("H")){status="On Hold";}
               
                    jTableacc.getModel().setValueAt(status, j, 5);

                     j=j+1;
                 }
                 
                  accCount=j-2;
                 int n=0;
                 String qq;
                 while(j>=0){
                     
                        //////tracking loan with multiple cycle and p+I balance    
                     ///////////////////////////////////////////////
                     if(jTableacc.getModel().getValueAt(n, 1).toString().trim().startsWith("104")){            //check for empty string
                     
                      //   qq="select count(*) c from loanhist "
//                            + " where gl_no='"+jTableacc.getModel().getValueAt(n, 1)+"'  and ac_no= '"+jTableacc.getModel().getValueAt(n, 2)+"'";
                          
//                      ResultSet   rowcount = stmt.executeQuery(qq);
                        
//                        rowcount.next();
//                        int c=rowcount.getInt("c");
                       // JOptionPane.showMessageDialog(rootPane, c);
                               
                             
                       //  if(c>0){
                           
//                      String tit=   jTableacc.getModel().getValueAt(n, 0).toString();
//                         String glno=        jTableacc.getModel().getValueAt(n, 1).toString();
//                         String accno=jTableacc.getModel().getValueAt(n, 2).toString();
                     qq="select sum(principal+interest) amt,cycle from loanhist "
                            + " where gl_no='"+jTableacc.getModel().getValueAt(n, 1)+"'  and ac_no= '"+jTableacc.getModel().getValueAt(n, 2)+"' "
                             + " and cycle="+ jTableacc.getModel().getValueAt(n, 3)+
                           " group by cycle order by cycle desc";
                     current = stmt.executeQuery(qq);
                     
                      while(current.next()){
                          
                      
//                      jTableacc.getModel().setValueAt(tit, n,0 );
//                       jTableacc.getModel().setValueAt(glno, n,1 );
//                        jTableacc.getModel().setValueAt(accno, n,2 );
//                       jTableacc.getModel().setValueAt(current.getBigDecimal("cycle"), n, 3);
                    
                       jTableacc.getModel().setValueAt(thseparate( current.getBigDecimal("amt").setScale(2, RoundingMode.HALF_UP)), n,4 );
                      if( current.getDouble("amt")==0.0){ jTableacc.getModel().setValueAt("Paid-Off", n,5 );}
                       j=j-1; 
                       n=n+1;
                       accCount=accCount+1;
                      }
                          // }
                        // j=j-1; 
                         // n=n+1;
                      // accCount=accCount+1;
                     }else{
                      
                  qq="select  Coalesce(SUM(amount) ,0) as amt from memtrans " +
" where gl_no='"+jTableacc.getModel().getValueAt(n, 1)+"' and err_flag<>'E' and ac_no= '"+jTableacc.getModel().getValueAt(n, 2)+"'";
                     current = stmt.executeQuery(qq);
                      current.next();
                      jTableacc.getModel().setValueAt(thseparate( current.getBigDecimal("amt").negate()), n,4 );
                       
                       j=j-1; 
                       n=n+1;
                     }
                     
                  
                 }
                 
                   
              
                  
                 current.close();                     

                 
}
catch(Exception e){//JOptionPane.showMessageDialog(rootPane, e.getMessage());
} 
this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR)); 
jButtonO.doClick();
activate=false;
        }
    }//GEN-LAST:event_formWindowActivated

    private void jTabbedPane4ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTabbedPane4ComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane4ComponentShown

    private void jTabbedPane4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane4MouseClicked
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try{
            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current;
            int i=0;
            current = stmt.executeQuery( "select Bank_VNO,sname,saddress,Sdesi,sphoto,ssign from fssign where cust_no="+search.accnoonly );
            while(current.next()){
                jTablesign.getModel().setValueAt(current.getString("sname"), i, 0);
                jTablesign.getModel().setValueAt(current.getString("saddress"), i, 1);
                jTablesign.getModel().setValueAt(current.getString("Sdesi"), i, 2);
                i=i+1;

            }

        }catch(Exception e){ JOptionPane.showMessageDialog(rootPane, e.getMessage()); }

        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jTabbedPane4MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try{
            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current;
            int i=0;
            current = stmt.executeQuery( "select Bank_VNO,sname,saddress,Sdesi,sphoto,ssign from fssign where cust_no="+search.accnoonly );
            while(current.next()){
                jTablesign.getModel().setValueAt(current.getString("sname"), i, 0);
                jTablesign.getModel().setValueAt(current.getString("saddress"), i, 1);
                jTablesign.getModel().setValueAt(current.getString("Sdesi"), i, 2);
                i=i+1;
            }

        }catch(Exception e){ JOptionPane.showMessageDialog(this, e.getMessage()); }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTablesignMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablesignMouseClicked
        if(!jTablesign.getModel().getValueAt(jTablesign.getSelectedRow(), 0).toString().equalsIgnoreCase("")){
            //Codes for Fetching from shared folder
           /* this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
             try{
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
                ResultSet current;

                current = stmt.executeQuery("select sphoto,ssign from fssign where cust_no="+search.accnoonly+" and sname='"+jTablesign.getModel().getValueAt(jTablesign.getSelectedRow(), 0)+"'");
                if(current.next()){
                String pixpath;
                String pixpath2;
                InetAddress IPAddress=InetAddress.getLocalHost();
                String Host=IPAddress.getHostName();
                //JOptionPane.showMessageDialog(rootPane, Host);
                if(glob.OsServer.equalsIgnoreCase("192.168.101.2")){
                   pixpath="\\\\192.168.101.2\\FinSolutions\\Photos\\"+current.getString("sphoto"); 
                   pixpath2="\\\\192.168.101.2\\FinSolutions\\Signature\\"+current.getString("ssign");

                }
                else if(glob.OsServer.equalsIgnoreCase("Omfbserver")){
                   pixpath="\\\\Omfbserver\\FinSolutions\\Photos\\"+current.getString("sphoto"); 
                   pixpath2="\\\\Omfbserver\\FinSolutions\\Signature\\"+current.getString("ssign");

                }else if(glob.OsServer.equalsIgnoreCase("Backupserver1")){
                     pixpath="\\\\Backupserver1\\FinSolutions\\Photos\\"+current.getString("sphoto"); 
                   pixpath2="\\\\Backupserver1\\FinSolutions\\Signature\\"+current.getString("ssign");

                }
                else if(glob.OsServer.equalsIgnoreCase(Host)){
                     pixpath="C:\\FinSolutions\\Photos\\"+current.getString("sphoto"); 
                   pixpath2="C:\\FinSolutions\\Signature\\"+current.getString("ssign");

                }else{
                pixpath="\\\\"+glob.OsServer+"\\FinSolutions\\Photos\\"+current.getString("sphoto");
                pixpath2="\\\\"+glob.OsServer+"\\FinSolutions\\Signature\\"+current.getString("ssign");
                }
                //checking for extension for signature
                if(pixpath2.contains(".bmp")||pixpath2.contains(".BMP")){

                    BufferedImage image = BMPDecoder.read(new File(pixpath2));//signature
                    ImageIcon icon = new ImageIcon(image.getScaledInstance(300,300, Image.SCALE_SMOOTH));//signature
                    jLabelsign.setIcon(icon);//signature
                    ////////////////
                    
                    
                }
                else{
                    ImageIcon imageIconsign = new ImageIcon(new ImageIcon(pixpath2).getImage().getScaledInstance(120, 100, Image.SCALE_SMOOTH));//signature
                    jLabelsign.setIcon(imageIconsign);//signature
                }
                //check for file extension for photo
                if(pixpath.contains(".bmp")||pixpath.contains(".BMP")){

                    BufferedImage image = BMPDecoder.read(new File(pixpath));//photo
                    ImageIcon icon = new ImageIcon(image.getScaledInstance(300,300, Image.SCALE_SMOOTH));//photo
                    jLabelpix.setIcon(icon);//photo
                    //JOptionPane.showMessageDialog(this,current.getString("sphoto")+" and "+pixpath);
                }
                else{
                    ImageIcon imageIcon = new ImageIcon(new ImageIcon(pixpath).getImage().getScaledInstance(300, 300, Image.SCALE_SMOOTH));//photo
                    jLabelpix.setIcon(imageIcon);//photo
                } 
                } //end of if(current.next())
            }
            catch(IOException | SQLException e){
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try{
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
                ResultSet current;

         current = stmt.executeQuery("select dbphoto,dbsign,sphoto,ssign from fssign where cust_no="+search.accnoonly+" and sname='"+jTablesign.getModel().getValueAt(jTablesign.getSelectedRow(), 0)+"'");
         
        // current = stmt.executeQuery("select CAST( CONVERT(VARCHAR(MAX), dbphoto) AS VARBINARY) dbphoto,CAST( CONVERT(VARCHAR(MAX), dbsign) AS VARBINARY)dbsign from fssign where cust_no="+search.cusno);
               current.next();
              // JOptionPane.showMessageDialog(rootPane,current.getString("sign") );
               //if(current.getString("dbsign").startsWith("FFD")){
               
               byte[] fileBytes=current.getBytes("dbphoto");
               byte[] fileBytes2=current.getBytes("dbsign");
               ImageIcon pic=new ImageIcon(fileBytes);
               if(!current.getString("sphoto").contains(".BMP")){
     Image resizpic =pic.getImage().getScaledInstance(200,200,Image.SCALE_SMOOTH);
     ImageIcon resizIcon = new ImageIcon(resizpic);
   
    jLabelpix.setIcon(resizIcon);
               }
               else {
              
                  ByteArrayInputStream bmpimage = new ByteArrayInputStream(fileBytes);
      
             BufferedImage image = BMPDecoder.read(bmpimage);//signature
                ImageIcon icon = new ImageIcon(image.getScaledInstance(200,200, Image.SCALE_SMOOTH));//signature
                jLabelpix.setIcon(icon);//signature
            }
                 if(!current.getString("ssign").contains(".BMP")){
         
               ImageIcon sign=new ImageIcon(fileBytes2);
     Image resizpic2 =sign.getImage().getScaledInstance(200,200,Image.SCALE_SMOOTH);
     ImageIcon resizIcon2 = new ImageIcon(resizpic2);
            jLabelsign.setIcon(resizIcon2);
                 }
             else{
             ByteArrayInputStream bmpimage2 = new ByteArrayInputStream(fileBytes2);
      //BufferedImage bImage2 = ImageIO.read(bis);
          // Image image = ImageIO.read(resizpic); 

             BufferedImage image2 = BMPDecoder.read(bmpimage2);//signature
                ImageIcon icon2 = new ImageIcon(image2.getScaledInstance(200,200, Image.SCALE_SMOOTH));//signature
                jLabelsign.setIcon(icon2);//signature
             
               }
        }
        catch(Exception ex){JOptionPane.showMessageDialog(rootPane, ex.getMessage());}
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

            }
            
            
        try{
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
                ResultSet current;

          current = stmt.executeQuery("select dbphoto,dbsign from fssign where cust_no="+search.accnoonly+" and sname='"+jTablesign.getModel().getValueAt(jTablesign.getSelectedRow(), 0)+"'");
                    if(current.next()){
              // JOptionPane.showMessageDialog(rootPane,current.getString("sign") );
               //if(current.getString("dbsign").startsWith("FFD")){
               
               byte[] fileBytes=current.getBytes("dbphoto");
               ImageIcon pic=new ImageIcon(fileBytes);
     Image resizpic =pic.getImage().getScaledInstance(300,300,Image.SCALE_SMOOTH);
     ImageIcon resizIcon = new ImageIcon(resizpic);
   if(jLabelsign.getIcon().getIconHeight()==0){
    jLabelpix.setIcon(resizIcon);
                                              } 
         byte[] fileBytes2=current.getBytes("dbsign");
               ImageIcon sign=new ImageIcon(fileBytes2);
     Image resizpic2 =sign.getImage().getScaledInstance(300,300,Image.SCALE_SMOOTH);
     ImageIcon resizIcon2 = new ImageIcon(resizpic2);
           if(jLabelsign.getIcon().getIconHeight()==0){
            jLabelsign.setIcon(resizIcon2); 
                                                 }
             //  }
        } // end of if(current.next())
        }
        catch(Exception e){JOptionPane.showMessageDialog(rootPane, e.getMessage());}
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR)); */
// Code for Retrieving direct from Database
   this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try{
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
                ResultSet current;

         current = stmt.executeQuery("select dbphoto,dbsign,sphoto,ssign from fssign where cust_no="+search.accnoonly+" and sname='"+jTablesign.getModel().getValueAt(jTablesign.getSelectedRow(), 0)+"'");
         
        // current = stmt.executeQuery("select CAST( CONVERT(VARCHAR(MAX), dbphoto) AS VARBINARY) dbphoto,CAST( CONVERT(VARCHAR(MAX), dbsign) AS VARBINARY)dbsign from fssign where cust_no="+search.cusno);
               current.next();
              // JOptionPane.showMessageDialog(rootPane,current.getString("sign") );
               //if(current.getString("dbsign").startsWith("FFD")){
               
               byte[] fileBytes=current.getBytes("dbphoto");
               byte[] fileBytes2=current.getBytes("dbsign");
               ImageIcon pic=new ImageIcon(fileBytes);
               if(!current.getString("sphoto").contains(".BMP")){
     Image resizpic =pic.getImage().getScaledInstance(200,200,Image.SCALE_SMOOTH);
     ImageIcon resizIcon = new ImageIcon(resizpic);
   
    jLabelpix.setIcon(resizIcon);
               }
               else {
              
                  ByteArrayInputStream bmpimage = new ByteArrayInputStream(fileBytes);
      
             BufferedImage image = BMPDecoder.read(bmpimage);//signature
                ImageIcon icon = new ImageIcon(image.getScaledInstance(200,200, Image.SCALE_SMOOTH));//signature
                jLabelpix.setIcon(icon);//signature
            }
                 if(!current.getString("ssign").contains(".BMP")){
         
               ImageIcon sign=new ImageIcon(fileBytes2);
     Image resizpic2 =sign.getImage().getScaledInstance(200,200,Image.SCALE_SMOOTH);
     ImageIcon resizIcon2 = new ImageIcon(resizpic2);
            jLabelsign.setIcon(resizIcon2);
                 }
             else{
             ByteArrayInputStream bmpimage2 = new ByteArrayInputStream(fileBytes2);
      //BufferedImage bImage2 = ImageIO.read(bis);
          // Image image = ImageIO.read(resizpic); 

             BufferedImage image2 = BMPDecoder.read(bmpimage2);//signature
                ImageIcon icon2 = new ImageIcon(image2.getScaledInstance(200,200, Image.SCALE_SMOOTH));//signature
                jLabelsign.setIcon(icon2);//signature
             
               }
        }
        catch(Exception ex){JOptionPane.showMessageDialog(rootPane, ex.getMessage());}
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

        }// End of if   
    }//GEN-LAST:event_jTablesignMouseClicked

    private void jLabelpixMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelpixMouseClicked
         this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try{
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
                ResultSet current;

         current = stmt.executeQuery("select sphoto,ssign,dbphoto,dbsign from fssign where cust_no="+search.cusno);
        // current = stmt.executeQuery("select CAST( CONVERT(VARCHAR(MAX), dbphoto) AS VARBINARY) dbphoto,CAST( CONVERT(VARCHAR(MAX), dbsign) AS VARBINARY)dbsign from fssign where cust_no="+search.cusno);
               current.next();
              // JOptionPane.showMessageDialog(rootPane,current.getString("sign") );
               //if(current.getString("dbsign").startsWith("FFD")){
               
               byte[] fileBytes=current.getBytes("dbphoto");
               byte[] fileBytes2=current.getBytes("dbsign");
               ImageIcon pic=new ImageIcon(fileBytes);
               if(!current.getString("sphoto").contains(".BMP")){
     Image resizpic =pic.getImage().getScaledInstance(120,120,Image.SCALE_SMOOTH);
     ImageIcon resizIcon = new ImageIcon(resizpic);
   
    jLabelpix.setIcon(resizIcon);
               }
               else {
               
                  ByteArrayInputStream bmpimage = new ByteArrayInputStream(fileBytes);
      
             BufferedImage image = BMPDecoder.read(bmpimage);//signature
                ImageIcon icon = new ImageIcon(image.getScaledInstance(120,120, Image.SCALE_SMOOTH));//signature
                jLabelpix.setIcon(icon);//signature
            }
                 if(!current.getString("ssign").contains(".BMP")){
         
               ImageIcon sign=new ImageIcon(fileBytes2);
     Image resizpic2 =sign.getImage().getScaledInstance(120,120,Image.SCALE_SMOOTH);
     ImageIcon resizIcon2 = new ImageIcon(resizpic2);
            jLabelsign.setIcon(resizIcon2);
                 }
             else{
             ByteArrayInputStream bmpimage2 = new ByteArrayInputStream(fileBytes2);
      //BufferedImage bImage2 = ImageIO.read(bis);
          // Image image = ImageIO.read(resizpic); 

             BufferedImage image2 = BMPDecoder.read(bmpimage2);//signature
                ImageIcon icon2 = new ImageIcon(image2.getScaledInstance(120,120, Image.SCALE_SMOOTH));//signature
                jLabelsign.setIcon(icon2);//signature
             
               }
        }
        catch(Exception e){JOptionPane.showMessageDialog(rootPane, e.getMessage());}
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
 
        /* this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try{
            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current;

            current = stmt.executeQuery("select sphoto,ssign from fssign where cust_no="+search.accnoonly);
            if(current.next()){
            InetAddress IPAddress=InetAddress.getLocalHost();
                String Host=IPAddress.getHostName();
            String  pixpath,pixpath2;
            
                  
               
                    
             if(glob.OsServer.equalsIgnoreCase(Host)){
                     pixpath="C:\\FinSolutions\\Photos\\"+current.getString("sphoto"); 
                   pixpath2="C:\\FinSolutions\\Signature\\"+current.getString("ssign");

                }else{
                pixpath="\\\\"+glob.OsServer+"\\FinSolutions\\Photos\\"+current.getString("sphoto");
                pixpath2="\\\\"+glob.OsServer+"\\FinSolutions\\Signature\\"+current.getString("ssign");
                }
            //checking for extension for signature
            if(pixpath2.contains(".bmp")||pixpath2.contains(".BMP")){

                BufferedImage image = BMPDecoder.read(new File(pixpath2));//signature
                ImageIcon icon = new ImageIcon(image.getScaledInstance(100,100, Image.SCALE_SMOOTH));//signature
                jLabelsign.setIcon(icon);//signature
                //JOptionPane.showMessageDialog(this,current.getString("sphoto")+" and "+pixpath);
            }
            else{
                ImageIcon imageIconsign = new ImageIcon(new ImageIcon(pixpath2).getImage().getScaledInstance(120, 100, Image.SCALE_SMOOTH));//signature
                jLabelsign.setIcon(imageIconsign);//signature
            }
            //check for file extension for photo
            if(pixpath.contains(".bmp")||pixpath.contains(".BMP")){

                BufferedImage image = BMPDecoder.read(new File(pixpath));//photo
                ImageIcon icon = new ImageIcon(image.getScaledInstance(100,100, Image.SCALE_SMOOTH));//photo
                jLabelpix.setIcon(icon);//photo
                //JOptionPane.showMessageDialog(this,current.getString("sphoto")+" and "+pixpath);
            }
            else{
                ImageIcon imageIcon = new ImageIcon(new ImageIcon(pixpath).getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));//photo
                jLabelpix.setIcon(imageIcon);//photo
            }
        }
        }
        catch(IOException | SQLException e){
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        
     
       /*this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try{
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
                ResultSet current;

         current = stmt.executeQuery("select dbphoto,dbsign from fssign where cust_no="+search.cusno);
               if(current.next()){
              // JOptionPane.showMessageDialog(rootPane,current.getString("sign") );
               //if(current.getString("dbsign").startsWith("FFD")){
               
               byte[] fileBytes=current.getBytes("dbphoto");
               ImageIcon pic=new ImageIcon(fileBytes);
     Image resizpic =pic.getImage().getScaledInstance(250,250,Image.SCALE_SMOOTH);
     ImageIcon resizIcon = new ImageIcon(resizpic);
   
    jLabelpix.setIcon(resizIcon);
         byte[] fileBytes2=current.getBytes("dbsign");
               ImageIcon sign=new ImageIcon(fileBytes2);
     Image resizpic2 =sign.getImage().getScaledInstance(250,250,Image.SCALE_SMOOTH);
     ImageIcon resizIcon2 = new ImageIcon(resizpic2);
           
            jLabelsign.setIcon(resizIcon2);   
             //  }
               }
        }
        catch(Exception e){JOptionPane.showMessageDialog(rootPane, e.getMessage());}
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR)); */

    }//GEN-LAST:event_jLabelpixMouseClicked

    private void jButtonOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOActionPerformed
        //get openning Balances:
        if(!jTableacc.getModel().getValueAt(0, 0).toString().isEmpty())
        {
            //JOptionPane.showMessageDialog(rootPane,jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 0).toString());

            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            String today="",yr="",m="",d="";
            int i=0;
            try{
                StringBuffer stringBuffer = new StringBuffer();
                Date now = new Date();
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                today=sdf.format(now, stringBuffer, new FieldPosition(0)).toString();
                yr=today.substring(6);m=today.substring(3,5);d=today.substring(0,2);

            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
            String glno=jTableacc.getModel().getValueAt(0, 1).toString();
            String accno=jTableacc.getModel().getValueAt(0, 2).toString();
            //String BBF=   "select  SUM(amount) Amt from memtrans " +
            //" where   batch_date<='"+yr+"-"+m+"-"+d+" 00:00:00.000' and err_flag<>'E' and gl_no='"+glno+"' and ac_no='"+accno+"'";

            String query2="select NUBAN_CODE from member" +
" where gl_no='"+glno+"' and ac_no='"+accno+"'";
            conn=glob.getConnect();

            try{
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);

                ResultSet current;
                current = stmt.executeQuery(query2);
                current.next();
                jTextFieldnuban.setText(current.getString("NUBAN_CODE"));
                 jTextFieldacc.setText(glno+"."+accno);
                //BigDecimal Bal= current.getBigDecimal("Amt").setScale(2, RoundingMode.HALF_UP);
                BigDecimal Bal= BigDecimal.valueOf(Double.parseDouble(jTableacc.getModel().getValueAt(0, 4).toString().replaceAll(",", "")));

                BigDecimal TrxAmt=BigDecimal.ZERO;
                //set Cleared and Uncleared balances
                jTextFieldBalCU.setText(thseparate(Bal)+"");
                jTextFieldBalC.setText(thseparate(Bal)+"");
                jTextFieldBalU.setText("0.00");

                query2="select  distinct top 20  batch_date,t.ses_date,m.ses_date,t.trx_no num,m.gl_no,text,amount from memtrans m inner join trx_text t on m.trx_no=t.trx_no" +
                " where t.ses_date in(select  distinct  ses_date from memtrans where gl_no='"+glno+"' and ac_no='"+accno +"') and gl_no='"+glno+"' and ac_no='"+accno +"'"+
                " order by m.ses_date desc,m.batch_date desc,num desc" ;
                String q2="select  distinct top 20  batch_date,t.ses_date,m.ses_date,t.trx_no num,m.gl_no,text,amount from memtrans m inner join trx_text t on m.trx_no=t.trx_no" +
                " where t.ses_date=m.ses_date and err_flag<>'E' and gl_no='"+glno+"' and ac_no='"+accno +"'"+
                " order by m.ses_date desc,m.batch_date desc,num desc" ;

                current = stmt.executeQuery(q2);
                //JOptionPane.showMessageDialog(rootPane, i);

                String DateFmt="",DateFmt2="";
                while(current.next()){
                    //format the Date
                    DateFmt=  current.getString("ses_date").substring(0,10);
                    DateFmt2=  current.getString("batch_date").substring(0,10);
                    DateFmt=DateFmt.substring(8)+"/"+DateFmt.substring(5,7)+"/"+DateFmt.substring(0,4);
                    DateFmt2=DateFmt2.substring(8)+"/"+DateFmt2.substring(5,7)+"/"+DateFmt2.substring(0,4);

                    jTablehist.getModel().setValueAt(  DateFmt2, i, 0);
                    jTablehist.getModel().setValueAt(  DateFmt, i, 1);
                    jTablehist.getModel().setValueAt(  current.getString("num"), i, 2);
                    jTablehist.getModel().setValueAt(  current.getString("text"), i, 3);
                    Bal=Bal.add(TrxAmt);
                    jTablehist.getModel().setValueAt(  thseparate(current.getBigDecimal("amount").setScale(2, RoundingMode.HALF_UP).negate()), i, 4);
                    jTablehist.getModel().setValueAt(  thseparate(Bal.abs().setScale(2, RoundingMode.HALF_UP)), i, 5);
                    TrxAmt=current.getBigDecimal("amount");

                    i=i+1;
                }
                PrevAccHistCount=PrevAccHistCount-i;// to obtain and remove prev hist from appearing below.
                   
                    if (searchtrue && PrevAccHistCount>0){
                    for(int k=i; k<=(i+PrevAccHistCount);k++){
                        jTablehist.getModel().setValueAt(  "", k, 0);
                        jTablehist.getModel().setValueAt(  "", k, 1);
                        jTablehist.getModel().setValueAt(  "", k, 2);
                        jTablehist.getModel().setValueAt(  "", k, 3);

                        jTablehist.getModel().setValueAt(  "", k, 4);
                        jTablehist.getModel().setValueAt( "", k, 5);

                    }

                } 
                    PrevAccHistCount=i; //to obtain the history row count for current table
                searchtrue=true;
                current.close();

            }
            catch(SQLException e){ JOptionPane.showMessageDialog(this,e.getMessage());
            }
            this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            jTablehist.requestFocusInWindow();
        }//end of overall if statement
       jTablehist.changeSelection(0, 0, false, false);
    }//GEN-LAST:event_jButtonOActionPerformed

    private void jTextFieldBalUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBalUActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldBalUActionPerformed

    private void jScrollPane2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScrollPane2KeyPressed

    }//GEN-LAST:event_jScrollPane2KeyPressed

    private void jTablehistKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTablehistKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTablehistKeyPressed

    private void jTableaccMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableaccMouseClicked
    
         //get openning Balances:
        if(!jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 0).toString().isEmpty())
        {
            String glno=jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 1).toString();
            String accno=jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 2).toString();
            String loancycle=jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 3).toString();
            BigDecimal Bal= BigDecimal.valueOf(Double.parseDouble(jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 4).toString().replaceAll(",", "")));

            String query2="select NUBAN_CODE from member" +
           " where gl_no='"+glno+"' and ac_no='"+accno+"'";
            conn=glob.getConnect();

            //JOptionPane.showMessageDialog(rootPane,jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 0).toString());
            /////////////////////////runing code  for loans
            ////////////////////////////////////////
            if(jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 1).toString().startsWith("104")){
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                try{
                    Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
          
                    BigDecimal TrxAmt=BigDecimal.ZERO;
                    //set Cleared and Uncleared balances
                    jTextFieldBalCU.setText(jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 4)+"");
                    jTextFieldBalC.setText(jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 4)+"");
                    jTextFieldBalU.setText("0.00");

                    String q2="select distinct top 20 trx_date,l.trx_no num,text,principal+interest amount from loanhist l inner join trx_text t on l.trx_no=t.trx_no"+
                    " where  gl_no='"+glno+"' and ac_no='"+accno +"' and cycle="+loancycle+
                    " order by trx_date desc" ;
                    if (jChAllhist.isSelected()){
                        q2="select distinct  trx_date,l.trx_no num,text,principal+interest amount from loanhist l inner join trx_text t on l.trx_no=t.trx_no"+
                        " where  gl_no='"+glno+"' and ac_no='"+accno +"' and cycle="+loancycle+
                        " order by trx_date desc" ;

                    }
                    ResultSet current = stmt.executeQuery(query2);
                    current.next();
                jTextFieldnuban.setText(current.getString("NUBAN_CODE"));
                //JOptionPane.showMessageDialog(rootPane,current.getString("NUBAN_CODE"));
                    current = stmt.executeQuery(q2);
                    //JOptionPane.showMessageDialog(rootPane, i);

                    int i=0;
                    String DateFmt="",DateFmt2="";
                    while(current.next()){
                        //format the Date
                        DateFmt=  current.getString("trx_date").substring(0,10);
                        //DateFmt2=  current.getString("batch_date").substring(0,10);
                        DateFmt=DateFmt.substring(8)+"/"+DateFmt.substring(5,7)+"/"+DateFmt.substring(0,4);
                        //DateFmt2=DateFmt2.substring(8)+"/"+DateFmt2.substring(5,7)+"/"+DateFmt2.substring(0,4);

                        jTablehist.getModel().setValueAt(  DateFmt, i, 0);
                        jTablehist.getModel().setValueAt(  DateFmt, i, 1);
                        jTablehist.getModel().setValueAt(  current.getString("num"), i, 2);
                        jTablehist.getModel().setValueAt(  current.getString("text"), i, 3);
                        Bal=Bal.subtract(TrxAmt);
                        jTablehist.getModel().setValueAt(  thseparate(current.getBigDecimal("amount")), i, 4);
                        jTablehist.getModel().setValueAt(  thseparate(Bal.abs()), i, 5);
                        TrxAmt=current.getBigDecimal("amount");

                        i=i+1;
                    }
                    //JOptionPane.showMessageDialog(rootPane, "C="+i+" and P="+ PrevAccHistCount);

                    PrevAccHistCount=PrevAccHistCount-i;// to obtain and remove prev hist from appearing below.
                    if (searchtrue && PrevAccHistCount>0){
                        for(int k=i; k<= (i+PrevAccHistCount);k++){
                            jTablehist.getModel().setValueAt(  "", k, 0);
                            jTablehist.getModel().setValueAt(  "", k, 1);
                            jTablehist.getModel().setValueAt(  "", k, 2);
                            jTablehist.getModel().setValueAt(  "", k, 3);

                            jTablehist.getModel().setValueAt(  "", k, 4);
                            jTablehist.getModel().setValueAt( "", k, 5);

                        }

                    }
                    PrevAccHistCount=i;//set the current history count for previous clearing
                    searchtrue=true;
                    current.close();
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
                catch(SQLException e){ JOptionPane.showMessageDialog(this,e.getMessage());
                }

            }
            ///////////////////////////////////////////////
            ////////////////end of loan hist code
            else{
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                String today="",yr="",m="",d="";
                int i=0;
                try{
                    StringBuffer stringBuffer = new StringBuffer();
                    Date now = new Date();
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                    today=sdf.format(now, stringBuffer, new FieldPosition(0)).toString();
                    yr=today.substring(6);m=today.substring(3,5);d=today.substring(0,2);

                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                // String BBF=   "select  SUM(amount) Amt from memtrans " +
                //" where   batch_date<='"+yr+"-"+m+"-"+d+" 00:00:00.000' and err_flag<>'E' and gl_no='"+glno+"' and ac_no='"+accno+"'";
                 if(jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 1).toString().contains("200301")){jButtonchrg.setVisible(true);}
                 else if(jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 1).toString().contains("300105")){jButtoncert.setVisible(true);}
                 else{
                     jButtonchrg.setVisible(false);
                     jButtoncert.setVisible(false);
                 }
                // String query2;
                conn=glob.getConnect();

                try{
                    Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);

                    //BigDecimal Bal= BigDecimal.valueOf(Double.parseDouble(jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 4).toString().replaceAll(",", "")));

                    BigDecimal TrxAmt=BigDecimal.ZERO;
                    //set Cleared and Uncleared balances
                    jTextFieldBalCU.setText(thseparate(Bal)+"");
                    jTextFieldBalC.setText(thseparate(Bal)+"");
                    jTextFieldBalU.setText("0.00");
                    
                    String q2="select  distinct top 20  batch_date,t.ses_date,m.ses_date,t.trx_no num,m.gl_no,text,amount from memtrans m inner join trx_text t on m.trx_no=t.trx_no" +
                    " where t.ses_date=m.ses_date and err_flag<>'E' and gl_no='"+glno+"' and ac_no='"+accno +"'"+
                    " order by m.ses_date desc,m.batch_date desc,num desc" ;
                    if (jChAllhist.isSelected()){
                        q2="select  distinct  batch_date,t.ses_date,m.ses_date,t.trx_no num,m.gl_no,text,amount from memtrans m inner join trx_text t on m.trx_no=t.trx_no" +
                        " where t.ses_date=m.ses_date and err_flag<>'E' and gl_no='"+glno+"' and ac_no='"+accno +"'"+
                        " order by m.ses_date desc,m.batch_date desc,num desc" ;

                    }

                    ResultSet current;
                    current = stmt.executeQuery(query2);
                    current.next();
                    jTextFieldnuban.setText(current.getString("NUBAN_CODE"));
                    jTextFieldacc.setText(glno+"."+accno);
                    current = stmt.executeQuery(q2);
                    //JOptionPane.showMessageDialog(rootPane, i);

                    String DateFmt="",DateFmt2="";
                    while(current.next()){
                        //format the Date
                        DateFmt=  current.getString("ses_date").substring(0,10);
                        DateFmt2=  current.getString("batch_date").substring(0,10);
                        DateFmt=DateFmt.substring(8)+"/"+DateFmt.substring(5,7)+"/"+DateFmt.substring(0,4);
                        DateFmt2=DateFmt2.substring(8)+"/"+DateFmt2.substring(5,7)+"/"+DateFmt2.substring(0,4);

                        jTablehist.getModel().setValueAt(  DateFmt2, i, 0);
                        jTablehist.getModel().setValueAt(  DateFmt, i, 1);
                        jTablehist.getModel().setValueAt(  current.getString("num"), i, 2);
                        jTablehist.getModel().setValueAt(  current.getString("text"), i, 3);
                        Bal=Bal.add(TrxAmt);
                        jTablehist.getModel().setValueAt(  thseparate(current.getBigDecimal("amount").negate()), i, 4);
                        jTablehist.getModel().setValueAt(  thseparate(Bal), i, 5);
                        TrxAmt=current.getBigDecimal("amount");

                        i=i+1;
                    }
                    //JOptionPane.showMessageDialog(rootPane, "C="+i+" and P="+ PrevAccHistCount);

                    PrevAccHistCount=PrevAccHistCount-i;// to obtain and remove prev hist from appearing below.
                    if (searchtrue && PrevAccHistCount>0){
                        for(int k=i; k<= (i+PrevAccHistCount);k++){       
                            jTablehist.getModel().setValueAt(  "", k, 0);
                            jTablehist.getModel().setValueAt(  "", k, 1);
                            jTablehist.getModel().setValueAt(  "", k, 2);
                            jTablehist.getModel().setValueAt(  "", k, 3);

                            jTablehist.getModel().setValueAt(  "", k, 4);
                            jTablehist.getModel().setValueAt( "", k, 5);

                        }

                    }
                    PrevAccHistCount=i;
                    searchtrue=true;
                    current.close();

                }
                catch(SQLException e){ JOptionPane.showMessageDialog(this,e.getMessage());
                }
                this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
            jTablehist.requestFocusInWindow();
        }//end of overall if statement
        jTablehist.changeSelection(0, 0, false, false);//make first row selected
    }//GEN-LAST:event_jTableaccMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jLabelpix.setIcon(null);
        jLabelsign.setIcon(null);
        search.setTitle(searchType);
        search.jLabel1.setText(searchType);
        search.query=query;
        search.conn=conn;
        search.setVisible(true);
        activate=true;
       jLabelpreview.setIcon(null);
 
        //clear Opening Form Panel
        for(int doc=0; doc<kyci; doc++){
        jTableDoc.getModel().setValueAt("", doc, 0);
         jTableDoc.getModel().setValueAt("",doc, 1);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton1.setSelected(false);
        jRadioButton5.setSelected(false);
        jRadioButton6.setSelected(false);
        searchType="Search on BVN";
        query="select  m.branch branch,m.cust_no cust_no,name,id_card,address,phone,ref_no,nuban_code,Bank_VNO from member m inner join customer c on m.cust_no=c.cust_no where Bank_VNO like'%";
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        jRadioButton2.setSelected(false);
        jRadioButton1.setSelected(false);
        jRadioButton4.setSelected(false);
        jRadioButton5.setSelected(false);
        jRadioButton6.setSelected(false);
        searchType="Search on NUBAN Code";
        query="select  m.branch branch,m.cust_no cust_no,name,id_card,address,phone,ref_no,nuban_code,Bank_VNO from member m inner join customer c on m.cust_no=c.cust_no where nuban_code like'%";
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);
        jRadioButton5.setSelected(false);
        jRadioButton1.setSelected(false);
        searchType="Search on ID Card";
        query="select  branch,cust_no,name,id_card,address,phone,ref_no,Bank_VNO from customer where id_card like'%";
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);
        jRadioButton1.setSelected(false);
        jRadioButton6.setSelected(false);
        searchType="Search on Ref NO";
        query="select  branch,cust_no,name,id_card,address,phone,ref_no,Bank_VNO from customer where ref_no like'%";
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        jRadioButton1.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);
        jRadioButton5.setSelected(false);
        jRadioButton6.setSelected(false);
        searchType="Search on A/C NO";
        query="select  branch,cust_no,name,id_card,address,phone,ref_no,Bank_VNO from customer where cust_no like'%";
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);
        jRadioButton5.setSelected(false);
        jRadioButton6.setSelected(false);
        searchType="Search on A/C Name";
        query="select  branch,cust_no,name,id_card,address,phone,ref_no,Bank_VNO from customer where name like'%";
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jLabel17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseClicked
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      Connection  con=glob.getConnectkyc();
        try{
            Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current;
            kyci=0;
            current = stmt.executeQuery( "select * from kyctable where clientID="+search.accnoonly );
            current.next();
           ////////////// checking for null values
           
           if(!current.getString("SC").equalsIgnoreCase("none")){
               jTableDoc.getModel().setValueAt("Sign Card", kyci, 0);
               jTableDoc.getModel().setValueAt(current.getString("SC"), kyci, 1);
               kyci=kyci+1;
           }
                
           if(!current.getString("AppLet").equalsIgnoreCase("none")){
               jTableDoc.getModel().setValueAt("Application Letter", kyci, 0);
               jTableDoc.getModel().setValueAt(current.getString("AppLet"), kyci, 1);
               kyci=kyci+1;
             }
            
           if(!current.getString("PerData").equalsIgnoreCase("none")){
               jTableDoc.getModel().setValueAt("Personal Data", kyci, 0);
               jTableDoc.getModel().setValueAt(current.getString("PerData"), kyci, 1);
              kyci=kyci+1;
           }
           if(!current.getString("SignForm").equalsIgnoreCase("none")){
               jTableDoc.getModel().setValueAt("Signature Form", kyci, 0);
               jTableDoc.getModel().setValueAt(current.getString("SignForm"), kyci, 1);
               kyci=kyci+1;
           }
           if(!current.getString("ATMForm").equalsIgnoreCase("none")){
               jTableDoc.getModel().setValueAt("ATM Form", kyci, 0);
               jTableDoc.getModel().setValueAt(current.getString("ATMForm"), kyci, 1);
               kyci=kyci+1;
           }
           if(!current.getString("IDCard").equalsIgnoreCase("none")){
               jTableDoc.getModel().setValueAt("ID Card", kyci, 0);
               jTableDoc.getModel().setValueAt(current.getString("IDCard"), kyci, 1);
               kyci=kyci+1;
           }
           if(!current.getString("Nepabill").equalsIgnoreCase("none")){
               jTableDoc.getModel().setValueAt("NEPA BILL", kyci, 0);
               jTableDoc.getModel().setValueAt(current.getString("Nepabill"), kyci, 1);
               kyci=kyci+1;
           }
           if(!current.getString("Mandate").equalsIgnoreCase("none")){
               jTableDoc.getModel().setValueAt("Mandate Form", kyci, 0);
               jTableDoc.getModel().setValueAt(current.getString("Mandate"), kyci, 1);
               kyci=kyci+1;
                 
           
          
           }
           if(!current.getString("Resoform").equalsIgnoreCase("none")){
               jTableDoc.getModel().setValueAt("Resolution Form", kyci, 0);
               jTableDoc.getModel().setValueAt(current.getString("Resoform"), kyci, 1);
              kyci=kyci+1;
           }
           if(!current.getString("introform").equalsIgnoreCase("none")){
               jTableDoc.getModel().setValueAt("Introduction Form", kyci, 0);
               jTableDoc.getModel().setValueAt(current.getString("introform"), kyci, 1);
               kyci=kyci+1;
           }
           if(!current.getString("CACform").equalsIgnoreCase("none")){
               jTableDoc.getModel().setValueAt("Corporate Affairs", kyci, 0);
               jTableDoc.getModel().setValueAt(current.getString("CACform"), kyci, 1);
              kyci=kyci+1;
           }
           //JOptionPane.showMessageDialog(rootPane,i+" "+current.getString("IDCard"));
           current.close();
           con.close();
        }catch(Exception e){ JOptionPane.showMessageDialog(this, e.getMessage()); }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        
    }//GEN-LAST:event_jLabel17MouseClicked

    private void jTableDocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDocMouseClicked
String path="\\\\fileserver\\FILESERVER\\OhafiaKYC";
        if(!jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().isEmpty()){
           if(jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().equalsIgnoreCase("Sign Card")){
           path  =path+ "\\Signature Card\\"+jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),1).toString() ;
           }
            
              
           }
        
        if(!jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().isEmpty()){
           if(jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().equalsIgnoreCase("Application Letter")){
           path  =path+ "\\Application Letter\\"+jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),1).toString() ;
           }
        }
        if(!jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().isEmpty()){
           if(jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().equalsIgnoreCase("Personal Data")){
           path  =path+ "\\Personal Data\\"+jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),1).toString() ;
           }
        }
        
          if(!jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().isEmpty()){
           if(jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().equalsIgnoreCase("Signature Form")){
           path  =path+ "\\Sign Form\\"+jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),1).toString() ;
           }
        }
          if(!jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().isEmpty()){
           if(jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().equalsIgnoreCase("ATM Form")){
           path  =path+ "\\ATM FORM\\"+jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),1).toString() ;
           }
        }
          if(!jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().isEmpty()){
           if(jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().equalsIgnoreCase("ID Card")){
           path  =path+ "\\ID Card\\"+jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),1).toString() ;
           }
        }
           if(!jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().isEmpty()){
           if(jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().equalsIgnoreCase("NEPA BILL")){
           path  =path+ "\\NEPA BILL\\"+jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),1).toString() ;
           }
        }
           if(!jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().isEmpty()){
           if(jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().equalsIgnoreCase("Mandate Form")){
           path  =path+ "\\Mandate\\"+jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),1).toString() ;
           }
        }
           
             if(!jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().isEmpty()){
           if(jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().equalsIgnoreCase("Resolution Form")){
           path  =path+ "\\Resolution\\"+jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),1).toString() ;
           }
        }
             
             if(!jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().isEmpty()){
           if(jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().equalsIgnoreCase("Introduction Form")){
           path  =path+ "\\Intro Form\\"+jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),1).toString() ;
           }
        }
              if(!jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().isEmpty()){
           if(jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),0).toString().equalsIgnoreCase("Corporate Affairs")){
           path  =path+ "\\Corporate Affairs\\"+jTableDoc.getModel().getValueAt(jTableDoc.getSelectedRow(),1).toString() ;
              }
            }
             
         
        try{
        
                    ImageIcon imageIcon = new ImageIcon(new ImageIcon(path).getImage().getScaledInstance(450, 600, Image.SCALE_SMOOTH));//photo
                    jLabelpreview.setIcon(imageIcon);
                      
        }
        catch(Exception e){JOptionPane.showMessageDialog(rootPane, e.getMessage());};
    }//GEN-LAST:event_jTableDocMouseClicked

    private void jTablehistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablehistMouseClicked
if(evt.getClickCount()==1){
    jTablehist.setToolTipText(jTablehist.getModel().getValueAt(jTablehist.getSelectedRow(), jTablehist.getSelectedColumn()).toString()); 
    String per=jTablehist.getValueAt(jTablehist.getSelectedRow(), 3).toString(); 
    
    if(per.contains("OMFB CHQ NO")){
        double amount=Double.parseDouble(jTablehist.getValueAt(jTablehist.getSelectedRow(), 4).toString().replace(",", ""));
     jLabelpercent.setText(amount*0.05+"");   
    }else{
        jLabelpercent.setText("");
    }
}
else if(evt.getClickCount()==2){
    String trx_no=jTablehist.getModel().getValueAt(jTablehist.getSelectedRow(),2).toString().trim();
    String text=JOptionPane.showInputDialog("Please Correct narraction",jTablehist.getModel().getValueAt(jTablehist.getSelectedRow(),3));
    String sql="update trx_text set text='"+text.trim()+"' where trx_no='"+trx_no+"'";
    //JOptionPane.showMessageDialog(this, sql);
// conn = glob.getConnect();
    PreparedStatement psmst;
    try {
        psmst = conn.prepareStatement(sql);
         psmst.executeUpdate();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
    }
   
}
    }//GEN-LAST:event_jTablehistMouseClicked

    private void jTablehistMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablehistMouseMoved
     //jTablehist.setToolTipText(jTablehist.getModel().getValueAt(jTablehist.getSelectedRow(), jTablehist.getSelectedColumn()).toString());        // TODO add your handling code here:

    }//GEN-LAST:event_jTablehistMouseMoved

    private void jComboBox1000ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1000ActionPerformed
    th=   Double.parseDouble(jComboBox1000.getSelectedItem().toString());
    times=1;
   jButtonok.doClick();
    }//GEN-LAST:event_jComboBox1000ActionPerformed

    private void jButtonokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonokActionPerformed
 String total=((th*1000)+(Five100*500)+(two100*200)+(one100*100)+(fifty*50)+(twen*20)+(ten*10)+(fiv*5))*times+""; 
 if (total.length()>3){
 jTextFieldsum.setText(total);
 }
    }//GEN-LAST:event_jButtonokActionPerformed

    private void jComboBox500ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox500ActionPerformed
     
 Five100=   Double.parseDouble(jComboBox500.getSelectedItem().toString()); 
 times=1;
    jButtonok.doClick();
    }//GEN-LAST:event_jComboBox500ActionPerformed

    private void jComboBox200ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox200ActionPerformed
   two100=   Double.parseDouble(jComboBox200.getSelectedItem().toString()); 
   times=1;
     jButtonok.doClick();    
    }//GEN-LAST:event_jComboBox200ActionPerformed

    private void jComboBox100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox100ActionPerformed
         one100=   Double.parseDouble(jComboBox100.getSelectedItem().toString()); 
         times=1;
          jButtonok.doClick();
 
    }//GEN-LAST:event_jComboBox100ActionPerformed

    private void jComboBox50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox50ActionPerformed
      fifty=   Double.parseDouble(jComboBox50.getSelectedItem().toString()); 
      times=1;
       jButtonok.doClick();
    }//GEN-LAST:event_jComboBox50ActionPerformed

    private void jComboBox20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox20ActionPerformed
      twen=   Double.parseDouble(jComboBox20.getSelectedItem().toString()); 
      times=1;
       jButtonok.doClick();
    }//GEN-LAST:event_jComboBox20ActionPerformed

    private void jComboBox10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox10ActionPerformed
    ten=   Double.parseDouble(jComboBox10.getSelectedItem().toString());
    times=1;
       jButtonok.doClick();
    }//GEN-LAST:event_jComboBox10ActionPerformed

    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
         
   fiv=   Double.parseDouble(jComboBox5.getSelectedItem().toString()); 
   times=1;
   jButtonok.doClick();
    }//GEN-LAST:event_jComboBox5ActionPerformed

    private void jButtonok1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonok1ActionPerformed
      jComboBox1000.setSelectedIndex(0);
      jComboBox500.setSelectedIndex(0);
      jComboBox200.setSelectedIndex(0);
      jComboBox100.setSelectedIndex(0);
      jComboBox50.setSelectedIndex(0);
      jComboBox20.setSelectedIndex(0);
      jComboBox10.setSelectedIndex(0);
      jComboBox5.setSelectedIndex(0);
      jComboBoxmultiple.setSelectedIndex(0);
      jTextFieldsum.setText("0.00");
    }//GEN-LAST:event_jButtonok1ActionPerformed

    private void jLabel18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel18MouseClicked
double count=Double.parseDouble(JOptionPane.showInputDialog("Enter Currency Count"));
th=count;
jButtonok.doClick();
    }//GEN-LAST:event_jLabel18MouseClicked

    private void jLabel21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel21MouseClicked
double count=Double.parseDouble(JOptionPane.showInputDialog("Enter Currency Count"));
Five100=count;
jButtonok.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel21MouseClicked

    private void jLabel22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel22MouseClicked
       double count=Double.parseDouble(JOptionPane.showInputDialog("Enter Currency Count"));
two100=count;
jButtonok.doClick(); 
    }//GEN-LAST:event_jLabel22MouseClicked

    private void jLabel23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel23MouseClicked
      double count=Double.parseDouble(JOptionPane.showInputDialog("Enter Currency Count"));
one100=count;
jButtonok.doClick();         // TODO add your handling code here:
    }//GEN-LAST:event_jLabel23MouseClicked

    private void jLabel24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel24MouseClicked
  double count=Double.parseDouble(JOptionPane.showInputDialog("Enter Currency Count"));
fifty=count;
jButtonok.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel24MouseClicked

    private void jLabel26MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel26MouseClicked
          double count=Double.parseDouble(JOptionPane.showInputDialog("Enter Currency Count"));
twen=count;
jButtonok.doClick();
    }//GEN-LAST:event_jLabel26MouseClicked

    private void jLabel27MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel27MouseClicked
double count=Double.parseDouble(JOptionPane.showInputDialog("Enter Currency Count"));
ten=count;
jButtonok.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel27MouseClicked

    private void jLabel28MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel28MouseClicked
  double count=Double.parseDouble(JOptionPane.showInputDialog("Enter Currency Count"));
fiv=count;
jButtonok.doClick();
    }//GEN-LAST:event_jLabel28MouseClicked

    private void jLabelsignMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelsignMouseClicked
this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try{
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
                ResultSet current;

         current = stmt.executeQuery("select sphoto,ssign,dbphoto,dbsign from fssign where cust_no="+search.cusno);
        // current = stmt.executeQuery("select CAST( CONVERT(VARCHAR(MAX), dbphoto) AS VARBINARY) dbphoto,CAST( CONVERT(VARCHAR(MAX), dbsign) AS VARBINARY)dbsign from fssign where cust_no="+search.cusno);
               current.next();
              // JOptionPane.showMessageDialog(rootPane,current.getString("sign") );
               //if(current.getString("dbsign").startsWith("FFD")){
               
               byte[] fileBytes=current.getBytes("dbphoto");
               byte[] fileBytes2=current.getBytes("dbsign");
               ImageIcon pic=new ImageIcon(fileBytes);
               if(!current.getString("sphoto").contains(".BMP")){
     Image resizpic =pic.getImage().getScaledInstance(300,300,Image.SCALE_SMOOTH);
     ImageIcon resizIcon = new ImageIcon(resizpic);
   
    jLabelpix.setIcon(resizIcon);
               }
               else {
               
                  ByteArrayInputStream bmpimage = new ByteArrayInputStream(fileBytes);
      
             BufferedImage image = BMPDecoder.read(bmpimage);//signature
                ImageIcon icon = new ImageIcon(image.getScaledInstance(300,300, Image.SCALE_SMOOTH));//signature
                jLabelpix.setIcon(icon);//signature
            }
                 if(!current.getString("ssign").contains(".BMP")){
         
               ImageIcon sign=new ImageIcon(fileBytes2);
     Image resizpic2 =sign.getImage().getScaledInstance(300,300,Image.SCALE_SMOOTH);
     ImageIcon resizIcon2 = new ImageIcon(resizpic2);
            jLabelsign.setIcon(resizIcon2);
                 }
             else{
             ByteArrayInputStream bmpimage2 = new ByteArrayInputStream(fileBytes2);
      //BufferedImage bImage2 = ImageIO.read(bis);
          // Image image = ImageIO.read(resizpic); 

             BufferedImage image2 = BMPDecoder.read(bmpimage2);//signature
                ImageIcon icon2 = new ImageIcon(image2.getScaledInstance(300,300, Image.SCALE_SMOOTH));//signature
                jLabelsign.setIcon(icon2);//signature
             
               }
        }
        catch(Exception e){JOptionPane.showMessageDialog(rootPane, e.getMessage());}
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_jLabelsignMouseClicked

    private void jTextFieldsumMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldsumMouseClicked
        if(evt.getClickCount()==2){
       double times=    Double.parseDouble(JOptionPane.showInputDialog("Multiply Amount by:")) ;
       double multiple=Double.parseDouble(jTextFieldsum.getText())* times;
       jTextFieldsum.setText(multiple+"");
    }
    }//GEN-LAST:event_jTextFieldsumMouseClicked

    private void jComboBoxmultipleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxmultipleActionPerformed
       // jTextFieldsum.setText(Double.parseDouble(jTextFieldsum.getText())*(Double.parseDouble(jComboBoxmultiple.getSelectedItem().toString()))+"");.
       times=Integer.parseInt(jComboBoxmultiple.getSelectedItem().toString());
       if(times==0){times=1;}
       jButtonok.doClick();
    }//GEN-LAST:event_jComboBoxmultipleActionPerformed

    private void jButtonchrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonchrgActionPerformed
     if(!pw.equalsIgnoreCase("cHiN")){
      pw=JOptionPane.showInputDialog("Enter Password");
         }
if(pw.equalsIgnoreCase("cHiN")){
        String Username="Chinwendu";
   String amount=JOptionPane.showInputDialog("Enter Amount");
   String monthyear=JOptionPane.showInputDialog("Enter Month/Year e.g July 2020");
    Timestamp timestamp = new Timestamp(System.currentTimeMillis());    
        Random rand = new Random(timestamp.getTime());
        
        String   glno=jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 1).toString();
        String acno=jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 2).toString();
        String tranctno="";
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        String dtt=dateFormat.format(date);
       
        
        if(!amount.equalsIgnoreCase("0.0")){ // amount if
         //JOptionPane.showMessageDialog(rootPane, amount+glno);
        int Rnum=rand.nextInt(9999999);
tranctno=dtt.substring(2, 4)+dtt.substring(5, 7)+dtt.substring(8)+Rnum+"DSCH";
//String Whttranctno=dtt.substring(2, 4)+dtt.substring(5, 7)+dtt.substring(8)+Rnum+trannoCnt+"WHT#";
               String name=jTextFieldname.getText().trim();
        if(name.length()>15){name=name.substring(0,15);}
       // JOptionPane.showMessageDialog(rootPane,  Username);
          String sql3="insert into memtrans(branch,gl_no,ac_no,trx_no,ses_date,batch_date,amount,err_flag,fin_repo,fx_amount) values(100,'"+glno+"','"+acno+"','"+ tranctno+"','"+dtt+" 00:00:00.000','"+dtt+" 00:00:00.000','"+BigDecimal.valueOf(Double.parseDouble(amount.replaceAll(",", "")))+"','','1','0.00')"; 
          String sql3b="insert into memtrans(branch,gl_no,ac_no,trx_no,ses_date,batch_date,amount,err_flag,fin_repo,fx_amount) values(100,'400312','1','"+ tranctno+"','"+dtt+" 00:00:00.000','"+dtt+" 00:00:00.000','"+BigDecimal.valueOf(Double.parseDouble(amount.replaceAll(",", ""))).negate()+"','','1','0.00')"; 
              
         String sql4="insert into trx_text(branch,trx_no,cheque,teller,trx_code,text,username ,ses_date,fx_code,SUPER_USER) values(100,'"+ tranctno+"','','','FIB','"+monthyear+" CHG ON "+name.toUpperCase()+" "+acno+"','"+Username+"','"+dtt+" 00:00:00.000','0','NULL')";
                        

             
          try
          {
     
  PreparedStatement pstmt1=conn.prepareStatement(sql3);
   PreparedStatement pstmt1b=conn.prepareStatement(sql3b);
  PreparedStatement pstmt2=conn.prepareStatement(sql4);
  


       
 pstmt1.executeUpdate();
  pstmt1b.executeUpdate();
 pstmt2.executeUpdate();
 JOptionPane.showMessageDialog(rootPane, "Account Charged Successfully");
          }
          catch(Exception e){JOptionPane.showMessageDialog(rootPane, e.getMessage());}
}
        
        //Refreshing Daily savings Balance
        ///////////////////////////////////////
        String q="select m.gl_no, ac_no,ac_name,ac_status from member m  inner join coa c on m.gl_no=c.gl_no " +
" where m.cust_no='"+acno+"'  order by m.gl_no desc";
 //this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));            
try{
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
                ResultSet current ;
             
                  
                  String qq="select  Coalesce(SUM(amount) ,0) as amt from memtrans " +
" where gl_no='"+glno+"' and err_flag<>'E' and ac_no= '"+acno+"'";
                     current = stmt.executeQuery(qq);
                      current.next();
                      jTableacc.getModel().setValueAt(thseparate( current.getBigDecimal("amt").negate()), jTableacc.getSelectedRow(),4 );
          ////////////////////Refreshing history
           BigDecimal TrxAmt=BigDecimal.ZERO;
            BigDecimal Bal= BigDecimal.valueOf(Double.parseDouble(jTableacc.getModel().getValueAt(jTableacc.getSelectedRow(), 4).toString().replaceAll(",", "")));

           String q2="select  distinct top 20  batch_date,t.ses_date,m.ses_date,t.trx_no num,m.gl_no,text,amount from memtrans m inner join trx_text t on m.trx_no=t.trx_no" +
                    " where t.ses_date=m.ses_date and err_flag<>'E' and gl_no='"+glno+"' and ac_no='"+acno +"'"+
                    " order by m.ses_date desc,m.batch_date desc,num desc" ;
                    if (jChAllhist.isSelected()){
                        q2="select  distinct  batch_date,t.ses_date,m.ses_date,t.trx_no num,m.gl_no,text,amount from memtrans m inner join trx_text t on m.trx_no=t.trx_no" +
                        " where t.ses_date=m.ses_date and err_flag<>'E' and gl_no='"+glno+"' and ac_no='"+acno +"'"+
                        " order by m.ses_date desc,m.batch_date desc,num desc" ;

                    }

                      current = stmt.executeQuery(q2);
                    //JOptionPane.showMessageDialog(rootPane, i);
                     int i=0;
                    String DateFmt="",DateFmt2="";
                    while(current.next()){
                        //format the Date
                        DateFmt=  current.getString("ses_date").substring(0,10);
                        DateFmt2=  current.getString("batch_date").substring(0,10);
                        DateFmt=DateFmt.substring(8)+"/"+DateFmt.substring(5,7)+"/"+DateFmt.substring(0,4);
                        DateFmt2=DateFmt2.substring(8)+"/"+DateFmt2.substring(5,7)+"/"+DateFmt2.substring(0,4);

                        jTablehist.getModel().setValueAt(  DateFmt2, i, 0);
                        jTablehist.getModel().setValueAt(  DateFmt, i, 1);
                        jTablehist.getModel().setValueAt(  current.getString("num"), i, 2);
                        jTablehist.getModel().setValueAt(  current.getString("text"), i, 3);
                        Bal=Bal.add(TrxAmt);
                        jTablehist.getModel().setValueAt(  thseparate(current.getBigDecimal("amount").negate()), i, 4);
                        jTablehist.getModel().setValueAt(  thseparate(Bal), i, 5);
                        TrxAmt=current.getBigDecimal("amount");

                        i=i+1;
                    }

                    PrevAccHistCount=PrevAccHistCount-i;// to obtain and remove prev hist from appearing below.
                    if (searchtrue && PrevAccHistCount>0){
                        for(int k=i; k<= (i+PrevAccHistCount);k++){
                            jTablehist.getModel().setValueAt(  "", k, 0);
                            jTablehist.getModel().setValueAt(  "", k, 1);
                            jTablehist.getModel().setValueAt(  "", k, 2);
                            jTablehist.getModel().setValueAt(  "", k, 3);

                            jTablehist.getModel().setValueAt(  "", k, 4);
                            jTablehist.getModel().setValueAt( "", k, 5);

                        }

                    }
          ////////////////////////////
                      current.close(); 
                     }
catch(SQLException e){JOptionPane.showMessageDialog(rootPane, e.getMessage());}


}
    }//GEN-LAST:event_jButtonchrgActionPerformed

    private void jButtoncertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtoncertActionPerformed
String pwd=JOptionPane.showInputDialog("Enter Your Password");
if(pwd.equals("rOcK")){
    String   paydate=jTablehist.getModel().getValueAt(jTablehist.getSelectedRow(), 1).toString();
        String acno=jTextFieldacc.getText().substring(7);
    GenShareCert certpara= new  GenShareCert();
    certpara.jTextFielddate.setText(paydate.substring(6)+"-"+paydate.substring(3,5)+"-"+paydate.substring(0,2)); //2018-10-12
    certpara.jTextFieldac.setText(acno);
              certpara.setVisible(true);
}else{
    JOptionPane.showMessageDialog(rootPane, "You are not authorized \n your face has been captiured \n the police will be notified");
}
   
        
    
    }//GEN-LAST:event_jButtoncertActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Clients().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonO;
    private javax.swing.JButton jButtoncert;
    private javax.swing.JButton jButtonchrg;
    private javax.swing.JButton jButtonok;
    private javax.swing.JButton jButtonok1;
    private javax.swing.JCheckBox jChAllhist;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox10;
    private javax.swing.JComboBox<String> jComboBox100;
    private javax.swing.JComboBox<String> jComboBox1000;
    private javax.swing.JComboBox<String> jComboBox20;
    private javax.swing.JComboBox<String> jComboBox200;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JComboBox<String> jComboBox50;
    private javax.swing.JComboBox<String> jComboBox500;
    private javax.swing.JComboBox<String> jComboBoxmultiple;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelpercent;
    private javax.swing.JLabel jLabelpix;
    private javax.swing.JLabel jLabelpreview;
    private javax.swing.JLabel jLabelsign;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTable jTableDoc;
    private javax.swing.JTable jTableacc;
    private javax.swing.JTable jTablehist;
    private javax.swing.JTable jTablesign;
    private javax.swing.JTextField jTextFieldBalC;
    private javax.swing.JTextField jTextFieldBalCU;
    private javax.swing.JTextField jTextFieldBalU;
    private javax.swing.JTextField jTextFieldIDcard;
    private javax.swing.JTextField jTextFieldRefno;
    private javax.swing.JTextField jTextFieldacc;
    private javax.swing.JTextField jTextFieldaddress;
    private javax.swing.JTextField jTextFieldbvn;
    private javax.swing.JTextField jTextFieldgroup;
    private javax.swing.JTextField jTextFieldname;
    private javax.swing.JTextField jTextFieldnuban;
    private javax.swing.JTextField jTextFieldphone;
    private javax.swing.JTextField jTextFieldregdate;
    private javax.swing.JTextField jTextFieldsum;
    // End of variables declaration//GEN-END:variables
String searchType="Search on A/C Name";
String pw="none";
Clientname search = new Clientname();
int accCount=0,kyci,PrevAccHistCount=0;
boolean activate=false;
boolean searchtrue=false;
String query="select  branch,cust_no,name,id_card,address,phone,ref_no,Bank_VNO from customer where name like'%";
Global glob = new Global();
Connection conn=null;
 public String thseparate(BigDecimal amount){
 DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(Locale.ENGLISH);
DecimalFormatSymbols symbols = formatter.getDecimalFormatSymbols();

symbols.setGroupingSeparator(',');
formatter.setDecimalFormatSymbols(symbols);
formatter.setMinimumFractionDigits(2);
return formatter.format((amount.setScale(2, RoundingMode.HALF_UP)));    

 }
 
 
 ///declaring variables for calculator
  double th;
  double Five100;
  double two100;
  double one100;
  double fifty; 
  double twen;
  double ten;
  double fiv;
  int times=1;
 
}
